mod block;

/// Encrypts an arbitrary sized message by running chacha20.
/// The stream cipher of ChaCha20 is composed of running the block_function with an increasing counter,
/// which provides 64-bytes of keystream at a time.
pub fn ChaCha20<let N: u32>(
    key_bytes: [u8; 32],
    nonce_bytes: [u8; 12],
    counter: u32,
    plaintext: [u8; N],
) -> [u8; N] {
    let key = pack_bytes_to_u32_words_padded(key_bytes);
    let nonce = pack_bytes_to_u32_words_padded(nonce_bytes);

    let num_blocks = N / 64;
    let remaining_bytes = N % 64;

    let mut res_words = [0 as u32; ((N + 3) / 4)];

    let plaintext_words = pack_bytes_to_u32_words_padded(plaintext);

    for j in 0..num_blocks {
        let key_stream = block::chacha20_block(key, nonce, counter + j);
        for w in 0..16 {
            let idx = 16 * j + w;
            res_words[idx] = plaintext_words[idx] ^ key_stream[w];
        }
    }

    if remaining_bytes != 0 {
        let j = num_blocks;
        let key_stream = block::chacha20_block(key, nonce, counter + j);
        let words_needed = (remaining_bytes + 3) / 4;
        for w in 0..words_needed {
            let idx = 16 * j + w;
            res_words[idx] = plaintext_words[idx] ^ key_stream[w];
        }
    }

    let unpacked = unpack_u32_words_to_bytes(res_words);

    // Copy only first N bytes
    let mut res = [0 as u8; N];
    for i in 0..N {
        res[i] = unpacked[i];
    }

    res
}

/// The test data of this function is from section 2.4.2 of RFC7539, except that it pads 2 extra 0 bytes
/// since, for now, the function operations on 4-byte words
#[test]
fn test_ChaCha20() {
    let key = [
        0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E,
        0x0F, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D,
        0x1E, 0x1F,
    ];

    let nonce = [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4a, 0x00, 0x00, 0x00, 0x00];

    let counter = 1;

    let plaintext = [
        0x69, 0x64, 0x61, 0x4c, 0x61, 0x20, 0x73, 0x65, 0x47, 0x20, 0x64, 0x6e, 0x6c, 0x74, 0x6e,
        0x65, 0x6e, 0x65, 0x6d, 0x65, 0x20, 0x66, 0x6f, 0x20, 0x20, 0x65, 0x68, 0x74, 0x73, 0x61,
        0x6c, 0x63, 0x66, 0x6f, 0x20, 0x73, 0x39, 0x39, 0x27, 0x20, 0x66, 0x49, 0x20, 0x3a, 0x63,
        0x20, 0x49, 0x20, 0x64, 0x6c, 0x75, 0x6f, 0x66, 0x66, 0x6f, 0x20, 0x79, 0x20, 0x72, 0x65,
        0x6f, 0x20, 0x75, 0x6f, 0x20, 0x79, 0x6c, 0x6e, 0x20, 0x65, 0x6e, 0x6f, 0x20, 0x70, 0x69,
        0x74, 0x20, 0x72, 0x6f, 0x66, 0x20, 0x65, 0x68, 0x74, 0x75, 0x74, 0x75, 0x66, 0x20, 0x2c,
        0x65, 0x72, 0x73, 0x6e, 0x75, 0x73, 0x65, 0x65, 0x72, 0x63, 0x6f, 0x77, 0x20, 0x6e, 0x20,
        0x64, 0x6c, 0x75, 0x69, 0x20, 0x65, 0x62, 0x00, 0x00, 0x2e, 0x74,
    ];

    let expected_ciphertext = [
        0x9a, 0x35, 0x2e, 0x6e, 0x80, 0xf9, 0x68, 0x25, 0x28, 0x07, 0xba, 0x41, 0x81, 0x69, 0x0d,
        0xdd, 0xec, 0x7a, 0x7e, 0xe9, 0xc2, 0x60, 0x43, 0x1d, 0xcc, 0xaf, 0x27, 0x0a, 0x0b, 0xae,
        0x9f, 0xfd, 0xc5, 0x65, 0x1b, 0xf9, 0xab, 0x33, 0x47, 0x52, 0xab, 0x3d, 0x59, 0x8f, 0x57,
        0xb3, 0x62, 0xcd, 0x24, 0xd6, 0x39, 0x16, 0xab, 0x52, 0x51, 0xe6, 0x35, 0x0c, 0x53, 0x8f,
        0xd8, 0x61, 0x08, 0x9f, 0xbf, 0x0d, 0xca, 0x07, 0x61, 0x6a, 0x0d, 0x50, 0x08, 0x8e, 0xa3,
        0x56, 0x5e, 0xb6, 0x22, 0x8a, 0x4d, 0x51, 0xbc, 0x52, 0x06, 0xf8, 0xcc, 0x16, 0x1a, 0xe9,
        0x8c, 0x81, 0x36, 0x37, 0x79, 0xb7, 0xbf, 0x0b, 0xf9, 0x5a, 0xe6, 0x5b, 0xa3, 0x74, 0xed,
        0x8e, 0x0b, 0xb4, 0x42, 0x5e, 0x78, 0xf2, 0x03, 0x74, 0x4d, 0x87,
    ];
    let ciphertext = ChaCha20(key, nonce, counter, plaintext);
    assert(ciphertext == expected_ciphertext, f"\n{ciphertext}\n == \n{expected_ciphertext}");

    let decrypted_plaintext = ChaCha20(key, nonce, counter, ciphertext);
    assert(decrypted_plaintext == plaintext, f"\n{decrypted_plaintext}\n == \n{plaintext}");
}

/// Converts a [u8] array to a [u32] array (little-endian), padding the end with 0s if needed
fn pack_bytes_to_u32_words_padded<let N: u32>(bytes: [u8; N]) -> [u32; (N + 3) / 4] {
    // NOTE: length calculation uses ceil division, so we round up if there is any remainder
    let mut padded = [0 as u8; ((N + 3) / 4) * 4];

    // Copy input into padded array
    for i in 0..N {
        padded[i] = bytes[i];
    }

    let mut out = [0 as u32; (N + 3) / 4];
    for i in 0..out.len() {
        out[i] = padded[i * 4] as u32
            | ((padded[i * 4 + 1] as u32) << 8)
            | ((padded[i * 4 + 2] as u32) << 16)
            | ((padded[i * 4 + 3] as u32) << 24);
    }

    out
}

/// Converts a [u32] array to a [u8] array (little-endian)
fn unpack_u32_words_to_bytes<let N: u32>(words: [u32; N]) -> [u8; N * 4] {
    let mut out = [0 as u8; N * 4];
    for i in 0..N {
        out[i * 4] = (words[i] & 0xff) as u8;
        out[i * 4 + 1] = ((words[i] >> 8) & 0xff) as u8;
        out[i * 4 + 2] = ((words[i] >> 16) & 0xff) as u8;
        out[i * 4 + 3] = ((words[i] >> 24) & 0xff) as u8;
    }
    out
}
