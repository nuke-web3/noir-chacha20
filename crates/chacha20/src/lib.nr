mod block;

/// Encrypts an arbitrary sized message by running ChaCha20.
/// The stream cipher of ChaCha20 is composed of running the block_function with an increasing counter,
/// which provides 64-bytes of keystream at a time.
pub fn chacha20<let N: u32>(
    key: [u8; 32],
    nonce: [u8; 12],
    counter: u32,
    plaintext: [u8; N],
) -> [u8; N] {
    let mut ciphertext = [0 as u8; N];
    let mut key_u32 = u8_array_to_little_endian_u32(key);
    let mut nonce_u32 = u8_array_to_little_endian_u32(nonce);

    let num_blocks = (N + 63) / 64;

    for j in 0..num_blocks {
        let key_stream = block::chacha20_block(key_u32, nonce_u32, counter + j);
        let key_stream_bytes = u32_array_to_little_endian_u8_array(key_stream);

        let block_start = j * 64;
        let block_end = min(block_start + 64, N);

        for i in block_start..block_end {
            ciphertext[i] = plaintext[i] ^ key_stream_bytes[i - block_start];
        }
    }

    ciphertext
}

fn min(a: u32, b: u32) -> u32 {
    if a < b {
        a
    } else {
        b
    }
}

/// FIXME: this is a wastefull helper... wish we could cast.
fn u32_array_to_little_endian_u8_array<let N: u32>(input: [u32; N / 4]) -> [u8; N] {
    let mut output: [u8; N] = [0; N];

    for i in 0..(N / 4) {
        let bytes = u32::to_le_bytes::<4>(input[i] as Field);
        output[i * 4] = bytes[0];
        output[i * 4 + 1] = bytes[1];
        output[i * 4 + 2] = bytes[2];
        output[i * 4 + 3] = bytes[3];
    }

    output
}

/// FIXME: this is a wastefull helper... wish we could cast.
pub fn u8_array_to_little_endian_u32<let N: u32>(input: [u8; N]) -> [u32; N / 4] {
    let mut output: [u32; N / 4] = [0; N / 4];

    for i in 0..(N / 4) {
        output[i] = u32::from_le_bytes(
            [input[i * 4], input[i * 4 + 1], input[i * 4 + 2], input[i * 4 + 3]],
        ) as u32;
    }

    output
}

/// The test data of this function is from section 2.4.2 of RFC7539
#[test]
fn test_chacha20() {
    let key = [
        0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e,
        0x0f, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d,
        0x1e, 0x1f,
    ];

    let nonce = [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4a, 0x00, 0x00, 0x00, 0x00];

    let counter = 1;

    let plaintext = [
        0x4c, 0x61, 0x64, 0x69, 0x65, 0x73, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x47, 0x65, 0x6e, 0x74,
        0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6c,
        0x61, 0x73, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x27, 0x39, 0x39, 0x3a, 0x20, 0x49, 0x66, 0x20,
        0x49, 0x20, 0x63, 0x6f, 0x75, 0x6c, 0x64, 0x20, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x20, 0x79,
        0x6f, 0x75, 0x20, 0x6f, 0x6e, 0x6c, 0x79, 0x20, 0x6f, 0x6e, 0x65, 0x20, 0x74, 0x69, 0x70,
        0x20, 0x66, 0x6f, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x66, 0x75, 0x74, 0x75, 0x72, 0x65,
        0x2c, 0x20, 0x73, 0x75, 0x6e, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x20, 0x77, 0x6f, 0x75,
        0x6c, 0x64, 0x20, 0x62, 0x65, 0x20, 0x69, 0x74, 0x2e,
        // 0x00, 0x00
        // ^^ padding if needed
    ];

    let ciphertext = chacha20(key, nonce, counter, plaintext);

    let expected_ciphertext = [
        0x6e, 0x2e, 0x35, 0x9a, 0x25, 0x68, 0xf9, 0x80, 0x41, 0xba, 0x07, 0x28, 0xdd, 0x0d, 0x69,
        0x81, 0xe9, 0x7e, 0x7a, 0xec, 0x1d, 0x43, 0x60, 0xc2, 0x0a, 0x27, 0xaf, 0xcc, 0xfd, 0x9f,
        0xae, 0x0b, 0xf9, 0x1b, 0x65, 0xc5, 0x52, 0x47, 0x33, 0xab, 0x8f, 0x59, 0x3d, 0xab, 0xcd,
        0x62, 0xb3, 0x57, 0x16, 0x39, 0xd6, 0x24, 0xe6, 0x51, 0x52, 0xab, 0x8f, 0x53, 0x0c, 0x35,
        0x9f, 0x08, 0x61, 0xd8, 0x07, 0xca, 0x0d, 0xbf, 0x50, 0x0d, 0x6a, 0x61, 0x56, 0xa3, 0x8e,
        0x08, 0x8a, 0x22, 0xb6, 0x5e, 0x52, 0xbc, 0x51, 0x4d, 0x16, 0xcc, 0xf8, 0x06, 0x81, 0x8c,
        0xe9, 0x1a, 0xb7, 0x79, 0x37, 0x36, 0x5a, 0xf9, 0x0b, 0xbf, 0x74, 0xa3, 0x5b, 0xe6, 0xb4,
        0x0b, 0x8e, 0xed, 0xf2, 0x78, 0x5e, 0x42, 0x87, 0x4d,
        // 0x74, 0x03
        // ^^ padding if needed
    ];

    let decrypted_plaintext = chacha20(key, nonce, counter, ciphertext);

    assert(ciphertext == expected_ciphertext, f"\n{ciphertext}\n == \n{expected_ciphertext}");

    assert(decrypted_plaintext == plaintext, f"\n{ciphertext}\n == \n{expected_ciphertext}");
}
